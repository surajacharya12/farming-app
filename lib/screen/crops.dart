// lib/screens/crops.dart
import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';

import '../models/soil/soilmodel.dart';
import '../api/soil_api_helper.dart';

class Crops extends StatefulWidget {
  const Crops({super.key});

  @override
  State<Crops> createState() => _CropsState();
}

class _CropsState extends State<Crops> {
  Autogenerated? soilData;
  bool isLoading = true;
  String error = '';

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  Future<void> _loadData() async {
    bool serviceEnabled;
    LocationPermission permission;

    serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      setState(() {
        error = 'Location services are disabled.';
        isLoading = false;
      });
      return;
    }

    permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        setState(() {
          error = 'Location permissions are denied';
          isLoading = false;
        });
        return;
      }
    }

    if (permission == LocationPermission.deniedForever) {
      setState(() {
        error = 'Location permissions are permanently denied';
        isLoading = false;
      });
      return;
    }

    try {
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );

      final data = await SoilApiHelper.fetchSoilData(
        lat: position.latitude,
        lon: position.longitude,
      );

      setState(() {
        soilData = data;
        isLoading = false;
      });
    } catch (e) {
      setState(() {
        error = e.toString();
        isLoading = false;
      });
    }
  }

  Widget _buildFertilizerInfo() {
    final opv = soilData?.fertilizer?.maize?.oPV;
    if (opv == null) return const Text("No fertilizer data available.");

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          "Maize (OPV):",
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        Text("DAP: ${opv.dAP ?? 'N/A'}"),
        Text("UREA1: ${opv.uREA1 ?? 'N/A'}"),
        Text("UREA2: ${opv.uREA2 ?? 'N/A'}"),
        Text("UREA3: ${opv.uREA3 ?? 'N/A'}"),
        Text("MOP: ${opv.mOP ?? 'N/A'}"),
        Text("Organic: ${opv.organic ?? 'N/A'}"),
        Text("Zinc: ${opv.zinc ?? 'N/A'}"),
        Text("Boron: ${opv.boron ?? 'N/A'}"),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.green[50],
      appBar: AppBar(title: const Text('Recommended Crops')),
      body: Center(
        child:
            isLoading
                ? const CircularProgressIndicator()
                : error.isNotEmpty
                ? Text(error, style: const TextStyle(color: Colors.red))
                : Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: _buildFertilizerInfo(),
                ),
      ),
    );
  }
}
